# ===================================================================
# Spring Boot configuration for the "prod" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

logging:
  level:
    ROOT: INFO
    io.github.jhipster: INFO
    com.goofinity.pgc_service: INFO

management:
  metrics:
    export:
      prometheus:
        enabled: false

spring:
  devtools:
    restart:
      enabled: false
    livereload:
      enabled: false
  cloud:
    consul:
      discovery:
        prefer-ip-address: true
      host: localhost
      port: 8500
    stream:
      bindings:
        balanceTrackingPublisherChannel:
          destination: balanceTracking
          group: balance-group
        balanceTrackingReceiverChannel:
          destination: balanceTracking
          group: balance-group
        dailyStatisticPublisherChannel:
          destination: dailyStatistic
          group: dailyStatistic-group
        dailyStatisticReceiverChannel:
          destination: dailyStatistic
          group: dailyStatistic-group
        lineItemStatisticPublisherChannel:
          destination: lineItemStatistic
          group: lineItemStatistic-group
        lineItemStatisticReceiverChannel:
          destination: lineItemStatistic
          group: lineItemStatistic-group
        shopifyUpdatePublisherChannel:
          destination: shopifyUpdate
          group: shopifyUpdate-group
        shopifyUpdateReceiverChannel:
          destination: shopifyUpdate
          group: shopifyUpdate-group
        productStatisticPublisherChannel:
          destination: productStatistic
          group: productStatistic-group
        productStatisticReceiverChannel:
          destination: productStatistic
          group: productStatistic-group
        trackingMorePublisherChannel:
          destination: trackingMore
          group: trackingMore-group
        trackingMoreReceiverChannel:
          destination: trackingMore
          group: trackingMore-group
        sendEmailPublisherChannel:
          destination: sendEmail
          group: sendEmail-group
        sendEmailReceiverChannel:
          destination: sendEmail
          group: sendEmail-group
        supplierBalancePublisherChannel:
          destination: supplierBalance
          group: supplierBalance-group
        supplierBalanceReceiverChannel:
          destination: supplierBalance
          group: supplierBalance-group
        mappingProductPublisherChannel:
          destination: mappingProduct
          group: mappingProduct-group
        mappingProductReceiverChannel:
          destination: mappingProduct
          group: mappingProduct-group
        syncTrackingPublisherChannel:
          destination: syncTracking
          group: syncTracking-group
        syncTrackingReceiverChannel:
          destination: syncTracking
          group: syncTracking-group
          consumer:
            concurrency: 10
  data:
    mongodb:
      uri: mongodb://pgc_service:Pgc%40%402020@localhost:27017/pgc_service?authentication-database=pgc_service
  mail:
    host: localhost
    port: 25
    username:
    password:
  thymeleaf:
    cache: true
  rabbitmq:
    host: 188.166.184.148
    port: 5672
    username: pgc
    password: Pgc@@2020
  sleuth:
    sampler:
      probability: 1 # report 100% of traces
  zipkin: # Use the "zipkin" Maven profile to have the Spring Cloud Zipkin dependencies
    base-url: http://localhost:9411
    enabled: false
    locator:
      discovery:
        enabled: true

# ===================================================================
# To enable TLS in production, generate a certificate using:
# keytool -genkey -alias pgc-service -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
#
# You can also use Let's Encrypt:
# https://maximilian-boehm.com/hp2121/Create-a-Java-Keystore-JKS-from-Let-s-Encrypt-Certificates.htm
#
# Then, modify the server.ssl properties so your "server" configuration looks like:
#
# server:
#   port: 443
#   ssl:
#     key-store: classpath:config/tls/keystore.p12
#     key-store-password: password
#     key-store-type: PKCS12
#     key-alias: selfsigned
#     # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
#     ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
# ===================================================================
server:
  port: 8081
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css, application/javascript, application/json
    min-response-size: 1024

cloud:
  aws:
    thumb-url: http://yummyprofit-bucket.s3-website-ap-southeast-1.amazonaws.com
    region: ap-southeast-1
    endpoint-url: https://s3.ap-southeast-1.amazonaws.com
    access-key: AKIAYZJEMFEJYORCUWNZ
    secret-key: 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
    bucket-name: printway
    thumb-bucket-name: printway-thumbnails
    amazon-ses:
      configuration-set: PW-SERVICE
      from: info@printway.io

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  http:
    cache: # Used by the CachingHttpHeadersFilter
      timeToLiveInDays: 1461
  cache: # Cache configuration
    ehcache: # Ehcache configuration
      time-to-live-seconds: 3600 # By default objects stay 1 hour in the cache
      max-entries: 1000 # Number of objects in each cache entry
  security:
    authentication:
      jwt:
        # This token must be encoded using Base64 and be at least 256 bits long (you can type `openssl rand -base64 64` on your command line to generate a 512 bits one)
        # As this is the PRODUCTION configuration, you MUST change the default key, and store it securely:
        # - In the JHipster Registry (which includes a Spring Cloud Config server)
        # - In a separate `application-prod.yml` file, in the same folder as your executable JAR file
        # - In the `JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET` environment variable
        base64-secret: N2FiYWNmMWY2ZTE4M2ZkZDEzNjg5NDMxMzkzMDIwZDVjOWMyYzI4NzNmNTQ1NjdmMDc0MzM1ODZmOTlkOTNiOGE2ZDQ0MzZlZjI3YzdkMzdjMWYyZjJhNmYyYTUxMTYwYjhmN2MwZGI0MzIwOTdkM2MxNGUxMDA2YjMxNzliZjQ=
        # Token is valid 24 hours
        token-validity-in-seconds: 86400
        token-validity-in-seconds-for-remember-me: 2592000
  mail: # specific JHipster mail property, for standard properties see MailProperties
    base-url: http://my-server-url-to-change # Modify according to your server's URL
  metrics:
    logs: # Reports metrics in the logs
      enabled: false
      report-frequency: 60 # in seconds
  logging:
    use-json-format: false # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: false
      host: localhost
      port: 5000
      queue-size: 512
  audit-events:
    retention-period: 30 # Number of days before audit events are deleted.

# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

application:
  security-key: NjVjZjQ3OWMzMWZjM2M0YjE5NDNmODViMTFjOWZiOGEyOWUzYjFhMTlh
  url: https://app.printway.io
  shopifyAppApiKey: f806c6566f42236c21968b15f7eec55b
  shopifyAppApiSecret: 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
  skuJoinSymbol: "-"
  uniqueKeyLength: 7
  wooWebhookKey: NjVjZjQ3OWMzMWZjM2M0YjE5NDNmODViMTFjOWZiOGEyOWUzYjFhMTlh
  cron:
    coolingOfPayment: "0 */15 * * * *"
    checkSendNotification: "0 0 */1 * * *"
    checkSellerLevel: "0 0 */1 * * *"
    resetOrderStatistic: "0 0 0,12 * * *"
    syncMissingOrder: "0 0 0/6 * * *"
  trackingMoreApiKey: a73c5e98-a120-4654-9e4b-21f3154106aa

sentry:
  enabled: true
  dsn: https://fe40f4f6f73940a89b860267e991d27e@o305932.ingest.sentry.io/5341741
  stacktrace-app-packages:
    - com.goofinity.pgc_service
