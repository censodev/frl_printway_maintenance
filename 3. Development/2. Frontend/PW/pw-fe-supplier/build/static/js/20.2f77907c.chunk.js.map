{"version":3,"sources":["core/util/Api.js","core/util/checkTokenExpired.js","redux/actions/AuthActions.js","redux/actions/NewsActions.js","core/util/getQueryUrl.js","redux/actions/BalanceActions.js","redux/actions/ProductsActions.js","redux/actions/OrdersActions.js","redux/actions/ProfileActions.js","redux/actions/ExportHistoryActions.js","redux/actions/DashboardActions.js","views/Login/Activate/activate.module.scss","views/Login/Activate/Activate.js","containers/Activate/ActivateContainer.js"],"names":["axios","create","baseURL","process","headers","checkTokenExpired","error","response","data","status","title","localStorage","clear","window","location","href","loginSuccessAction","token","type","AuthActionTypes","LOGIN_SUCCESS","payload","loginErrorAction","LOGIN_ERROR","logoutAction","LOGOUT","login","params","dispatch","a","DO_LOGIN","Api","post","res","result","_","setItem","message","register","DO_REGISTER","REGISTER_SUCCESS","REGISTER_ERROR","activate","key","DO_ACTIVATE","get","ACTIVATE_SUCCESS","ACTIVATE_ERROR","fetchUserInfo","DO_FETCH_INFO","info","FETCH_INFO_SUCCESS","roles","Array","isArray","includes","FETCH_INFO_ERROR","forgotPass","DO_FORGOT_INIT","FORGOT_INIT_SUCCESS","FORGOT_INIT_ERROR","resetPass","DO_CHANGE_PASS","CHANGE_PASS_SUCCESS","CHANGE_PASS_ERROR","createNewAction","NewsActionTypes","DO_CREATE_NEW","createNewSuccessAction","CREATE_NEW_SUCCESS","createNewErrorAction","CREATE_NEW_ERROR","editNewByIdAction","DO_EDIT_NEW","editNewByIdSuccessAction","EDIT_NEW_SUCCESS","editNewByIdErrorAction","EDIT_NEW_ERROR","deleteNewByIdAction","DO_DELETE_NEW","deleteNewByIdSuccess","DELETE_NEW_SUCCESS","deleteNewByIdError","DELETE_NEW_ERROR","fetchAllNews","DO_FETCH_ALL_NEWS","url","URL","search_params","searchParams","Object","entries","value","append","decodeURIComponent","NEWS","FETCH_ALL_NEWS_SUCCESS","FETCH_ALL_NEWS_ERROR","createNew","API","editNew","put","deleteNew","id","delete","fetchTopNews","DO_FETCH_TOP_NEWS","news","FETCH_TOP_NEWS_SUCCESS","FETCH_TOP_NEWS_ERROR","getQueryUrl","fetchAllBalancesAction","BalanceActionTypes","FETCH_ALL_BALANCE","fetchAllBalancesSuccessAction","balances","FETCH_ALL_BALANCE_SUCCESS","fetchAllBalancesErrorAction","FETCH_ALL_BALANCE_ERROR","fetchAllBalances","fetchOverviewAction","FETCH_OVERVIEW","fetchOverviewSuccessAction","FETCH_OVERVIEW_SUCCESS","fetchOverviewErrorAction","FETCH_OVERVIEW_ERROR","fetchOverview","createDepositAction","CREATE_DEPOSIT","createDepositSuccessAction","CREATE_DEPOSIT_SUCCESS","createDepositErrorAction","CREATE_DEPOSIT_ERROR","doCreateDeposit","updateDepositAction","UPDATE_DEPOSIT","updateDepositSuccessAction","UPDATE_DEPOSIT_SUCCESS","updateDepositErrorAction","UPDATE_DEPOSIT_ERROR","doUpdateDeposit","deleteDepositAction","DELETE_DEPOSIT","deleteDepositSuccessAction","DELETE_DEPOSIT_SUCCESS","deleteDepositErrorAction","DELETE_DEPOSIT_ERROR","doDeleteDeposit","resetError","RESET_ERROR","fetchAllProductTypeNoPaging","ProductsActionTypes","DO_FETCH_ALL_PRODUCT_TYPE_NO_PAGING","FETCH_ALL_PRODUCT_TYPE_NO_PAGING_SUCCESS","FETCH_ALL_PRODUCT_TYPE_NO_PAGING_ERROR","fetchAllOrderAction","OrdersActionTypes","FETCH_ALL_ORDERS","fetchAllOrderSuccessAction","orders","FETCH_ALL_ORDERS_SUCCESS","fetchAllOrderErrorAction","FETCH_ALL_ORDERS_ERROR","fetchAllOrder","saveImageDesignAction","SAVE_IMAGE_DESIGN","saveImageDesignSuccessAction","SAVE_IMAGE_DESIGN_SUCCESS","saveImageDesignErrorAction","SAVE_IMAGE_DESIGN_ERROR","saveImageDesign","exportOrderAction","EXPORT_ORDER","exportOrderSuccessAction","EXPORT_ORDER_SUCCESS","exportOrderErrorAction","EXPORT_ORDER_ERROR","exportOrder","arr","responseType","then","blob","Blob","disposition","fileName","split","fileSaver","catch","err","cancelAction","CANCEL","cancelSuccessAction","CANCEL_SUCCESS","cancelErrorAction","CANCEL_ERROR","cancel","fetchStatisticAction","FETCH_STATISTIC","fetchStatisticSuccessAction","FETCH_STATISTIC_SUCCESS","fetchStatisticErrorAction","FETCH_STATISTIC_ERROR","fetchStatistic","reportAction","REPORT","reportSuccesAction","REPORT_SUCCESS","reportErrorAction","report","editNotificationSettingByIdAction","ProfileActionTypes","DO_EDIT_NOTIFICATION_SETTING","editNotificationSettingByIdSuccessAction","EDIT_NOTIFICATION_SETTING_SUCCESS","editNotificationSettingByIdErrorAction","EDIT_NOTIFICATION_SETTING_ERROR","editContentSettingByIdAction","DO_EDIT_CONTENT_SETTING","editContentSettingByIdSuccessAction","EDIT_CONTENT_SETTING_SUCCESS","editContentSettingByIdErrorAction","EDIT_CONTENT_SETTING_ERROR","editUserInfoAction","DO_EDIT_USER_INFO","editUserInfoSuccessAction","EDIT_USER_INFO_SUCCESS","editUserInfoErrorAction","EDIT_USER_INFO_ERROR","editPassAction","DO_EDIT_PASS","editPassSuccessAction","EDIT_PASS_SUCCESS","editPassErrorAction","EDIT_PASS_ERROR","fetchAllNotificationSetting","DO_FETCH_ALL_NOTIFICATION_SETTING","settings","FETCH_ALL_NOTIFICATION_SETTING_SUCCESS","FETCH_ALL_NOTIFICATION_SETTING_ERROR","fetchAllContentSetting","DO_FETCH_ALL_CONTENT_SETTING","FETCH_ALL_CONTENT_SETTING_SUCCESS","FETCH_ALL_CONTENT_SETTING_ERROR","editNotificationSetting","editContentSetting","editUserInfo","editPassword","fetchExportHistoryAction","ExportHistoryActionTypes","FETCH_EXPORT_HISTORY","fetchExportHistorySuccessAction","history","FETCH_EXPORT_HISTORY_SUCCESS","fetchExportHistoryErrorAction","FETCH_EXPORT_HISTORY_ERROR","fetchExportHistory","fetchUrgentNote","DashboardActionTypes","DO_FETCH_URGENT_NOTE","FETCH_URGENT_NOTE_SUCCESS","FETCH_URGENT_NOTE_ERROR","module","exports","Activate","nextProps","auth","this","props","activateSuccess","search","URLSearchParams","className","cls","wrap","subTitle","extra","loading","activateLoading","disabled","style","paddingTop","paddingBottom","activateError","CatchError","showIcon","textAlign","Component","connect","state","toJS","AuthActions"],"mappings":"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","file":"static/js/20.2f77907c.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL: process.env.REACT_APP_CUSTOM_STATIC_API_URL,\n    // timeout: process.env.REACT_APP_CUSTOM_STATIC_API_TIME_OUT,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n","export default function checkTokenExpired(error) {\n    if (error) {\n        if (error.response.data.status === 401 && error.response.data.title === 'Unauthorized') {\n            localStorage.clear();\n            window.location.href = '/login';\n        }\n    }\n}\n","/**\n * Auth actions\n * */\nimport * as _ from 'lodash';\nimport {AuthActionTypes} from '../actionTypes';\nimport Api from '../../core/util/Api';\nimport checkTokenExpired from \"../../core/util/checkTokenExpired\";\n// import {createDepositAction, createDepositErrorAction, createDepositSuccessAction} from \"./TransactionActions\";\n// import Axios from \"axios\";\n// import setAuthorizationToken from '../../core/util/setAuthorizationToken';\n// import { runBackTestErrorAction } from './BackTestActions';\n\n// REGISTER\nconst registerAction = () => ({\n    type: AuthActionTypes.DO_REGISTER,\n});\n\nconst registerSucessAction = () => ({\n    type: AuthActionTypes.REGISTER_SUCCESS,\n});\n\nconst registerErrorAction = (error) => ({\n    type: AuthActionTypes.REGISTER_ERROR,\n    payload: error,\n});\n\n// LOGIN\nconst loginAction = () => ({\n    type: AuthActionTypes.DO_LOGIN,\n});\n\nconst loginSuccessAction = (token) => ({\n    type: AuthActionTypes.LOGIN_SUCCESS,\n    payload: token,\n});\n\nconst loginErrorAction = (error) => ({\n    type: AuthActionTypes.LOGIN_ERROR,\n    payload: error,\n});\n\n// LOGOUT\nexport const logoutAction = () => ({\n    type: AuthActionTypes.LOGOUT,\n});\n\n// ACTIVATE\nconst activateAction = () => ({\n    type: AuthActionTypes.DO_ACTIVATE,\n});\n\nconst activateSucessAction = () => ({\n    type: AuthActionTypes.ACTIVATE_SUCCESS,\n});\n\nconst activateErrorAction = (error) => ({\n    type: AuthActionTypes.ACTIVATE_ERROR,\n    payload: error,\n});\n\n// GET INFO\nconst fetchInfoAction = () => ({\n    type: AuthActionTypes.DO_FETCH_INFO,\n});\n\nconst fetchInfoSuccessAction = (info) => ({\n    type: AuthActionTypes.FETCH_INFO_SUCCESS,\n    payload: info,\n});\n\nconst fetchInfoErrorAction = (error) => ({\n    type: AuthActionTypes.FETCH_INFO_ERROR,\n    payload: error,\n});\n\n// FORGOT PASS\nconst forgotPassAction = () => ({\n    type: AuthActionTypes.DO_FORGOT_INIT\n});\n\nconst forgotPassSuccessAction = () => ({\n    type: AuthActionTypes.FORGOT_INIT_SUCCESS,\n});\n\nconst forgotPassErrorAction = (error) => ({\n    type: AuthActionTypes.FORGOT_INIT_ERROR,\n    payload: error,\n});\n\n\n// CHANGE PASS\n\nconst changePassAction = () => ({\n    type: AuthActionTypes.DO_CHANGE_PASS\n});\n\nconst changePassSuccessAction = () => ({\n    type: AuthActionTypes.CHANGE_PASS_SUCCESS,\n});\n\nconst changePassErrorAction = (error) => ({\n    type: AuthActionTypes.CHANGE_PASS_ERROR,\n    payload: error,\n});\n\n\n\nexport const login = (params) => async (dispatch) => {\n    dispatch(loginAction());\n    try {\n        const res = await Api.post('api/authenticate', params);\n        const result = _.get(res, 'data');\n        const token = _.get(result, 'id_token', '');\n        if (token) {\n            localStorage.setItem('id_token', token);\n            dispatch(loginSuccessAction(token));\n        } else {\n            dispatch(loginErrorAction('Token not found!'));\n        }\n    } catch (e) {\n        dispatch(loginErrorAction(e.response.data.message === 'error.http.401' ? 'Username or Password is incorrect!' : e.response.data.message));\n    }\n};\n\nexport const register = (params) => async (dispatch) => {\n    dispatch(registerAction());\n    try {\n        const res = await Api.post('api/register', params);\n        const status = _.get(res, 'status');\n        if (status === 201) {\n            dispatch(registerSucessAction());\n        }\n    } catch (e) {\n        dispatch(registerErrorAction(e.response.data.message));\n    }\n};\n\nexport const activate = (key) => async (dispatch) => {\n    dispatch(activateAction());\n    try {\n        const res = await Api.get(`api/activate?key=${key}`);\n        const status = _.get(res, 'status');\n        if (status === 200) {\n            dispatch(activateSucessAction());\n        }\n    } catch (e) {\n        dispatch(activateErrorAction(e.response.data.message));\n    }\n};\n\nexport const fetchUserInfo = () => async (dispatch) => {\n    dispatch(fetchInfoAction());\n    try {\n        const res = await Api.get('pgc-service/api/user');\n        const status = _.get(res, 'status');\n        if (status === 200) {\n            dispatch(fetchInfoSuccessAction(res.data));\n            const result = _.get(res, 'data');\n            if (result.roles && Array.isArray(result.roles) && !result.roles.includes('ROLE_SUPPLIER')) {\n                localStorage.clear();\n                window.location.href = '/login';\n            }\n        }\n    } catch (e) {\n        dispatch(fetchInfoErrorAction(e.response.data.message));\n    }\n};\n\nexport const forgotPass = (params) => async (dispatch) => {\n    dispatch(forgotPassAction());\n    try {\n        const response = await Api.post('api/account/reset-password/init', params);\n        const status = _.get(response, 'status');\n        if (status === 200) {\n            dispatch(forgotPassSuccessAction());\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(forgotPassErrorAction(error.response.data.message));\n    }\n};\n\nexport const resetPass = (params) => async (dispatch) => {\n    dispatch(changePassAction());\n    try {\n        const response = await Api.post('api/account/reset-password/finish', params);\n        const status = _.get(response, 'status');\n        if (status === 200) {\n            dispatch(changePassSuccessAction());\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(changePassErrorAction(error.response.data.message));\n    }\n};\n","import * as _ from 'lodash';\nimport {NewsActionTypes} from '../actionTypes';\nimport API from '../../core/util/Api';\nimport checkTokenExpired from '../../core/util/checkTokenExpired';\nimport axios from \"axios\";\n\n// FETCH ALL NEW\nconst fetchAllNewsAction = () => ({\n    type: NewsActionTypes.DO_FETCH_ALL_NEWS,\n});\n\nconst fetchAllNewsSuccessAction = (NEWS) => ({\n    type: NewsActionTypes.FETCH_ALL_NEWS_SUCCESS,\n    payload: NEWS,\n});\n\nconst fetchAllNewsErrorAction = (error) => ({\n    type: NewsActionTypes.FETCH_ALL_NEWS_ERROR,\n    payload: error,\n});\n\n// CREATE NEW\nexport const createNewAction = () => ({\n    type: NewsActionTypes.DO_CREATE_NEW,\n});\n\nexport const createNewSuccessAction = () => ({\n    type: NewsActionTypes.CREATE_NEW_SUCCESS,\n});\n\nexport const createNewErrorAction = (error) => ({\n    type: NewsActionTypes.CREATE_NEW_ERROR,\n    payload: error,\n});\n\n// UPDATE NEW\n\nexport const editNewByIdAction = () => ({\n    type: NewsActionTypes.DO_EDIT_NEW,\n});\n\nexport const editNewByIdSuccessAction = () => ({\n    type: NewsActionTypes.EDIT_NEW_SUCCESS,\n});\n\nexport const editNewByIdErrorAction = (error) => ({\n    type: NewsActionTypes.EDIT_NEW_ERROR,\n    payload: error,\n});\n\n// DELETE NEW\n\nexport const deleteNewByIdAction = () => ({\n    type: NewsActionTypes.DO_DELETE_NEW\n});\n\nexport const deleteNewByIdSuccess = () => ({\n    type: NewsActionTypes.DELETE_NEW_SUCCESS,\n});\n\nexport const deleteNewByIdError = (error) => ({\n    type: NewsActionTypes.DELETE_NEW_ERROR,\n    payload: error,\n});\n\n// FETCH TOP NEW\nconst fetchTopNewsAction = () => ({\n    type: NewsActionTypes.DO_FETCH_TOP_NEWS,\n});\n\nconst fetchTopNewsSuccessAction = (news) => ({\n    type: NewsActionTypes.FETCH_TOP_NEWS_SUCCESS,\n    payload: news,\n});\n\nconst fetchTopNewsErrorAction = (error) => ({\n    type: NewsActionTypes.FETCH_TOP_NEWS_ERROR,\n    payload: error,\n});\n\n\nexport const fetchAllNews = (params) => async (dispatch) => {\n    dispatch(fetchAllNewsAction());\n    try {\n        let url = new URL(`${process.env.REACT_APP_CUSTOM_STATIC_API_URL}pgc-service/api/news/page`) || '';\n        let search_params = url.searchParams;\n\n        for (let [key, value] of Object.entries(params)) {\n            search_params.append(key, value);\n        }\n\n        const response = await axios.get(decodeURIComponent(url));\n        const result = _.get(response, 'data');\n        dispatch(fetchAllNewsSuccessAction(result));\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(fetchAllNewsErrorAction(error.response.data.message));\n    }\n};\n\n\nexport const createNew = (params) => async (dispatch) => {\n    dispatch(createNewAction());\n    try {\n        const response = await API.post('pgc-service/api/news', params);\n        const result = _.get(response, 'data');\n        if (result) {\n            dispatch(createNewSuccessAction());\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(createNewErrorAction(error.response.data.message));\n    }\n};\n\nexport const editNew = (params) => async (dispatch) => {\n    dispatch(editNewByIdAction());\n    try {\n        const response = await API.put('pgc-service/api/news', params);\n        const result = _.get(response, 'data');\n        if (result) {\n            dispatch(editNewByIdSuccessAction());\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(editNewByIdErrorAction(error.response.data.message));\n    }\n};\n\nexport const deleteNew = (id) => async (dispatch) => {\n    dispatch(deleteNewByIdAction());\n    try {\n        const response = await API.delete(`pgc-service/api/news/${id}`);\n        const status = _.get(response, 'status');\n        if (status === 200) {\n            dispatch(deleteNewByIdSuccess());\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(deleteNewByIdError(error.response.data.message));\n    }\n};\n\nexport const fetchTopNews = () => async (dispatch) => {\n    dispatch(fetchTopNewsAction());\n    try {\n        const response = await API.get('pgc-service/api/news/top');\n        const result = _.get(response, 'data');\n        dispatch(fetchTopNewsSuccessAction(result));\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(fetchTopNewsErrorAction(error.response.data.message));\n    }\n};\n\n\n","export default function getQueryUrl(url, params) {\n    let result = new URL(`${process.env.REACT_APP_CUSTOM_STATIC_API_URL}${url}`) || '';\n    let search_params = result.searchParams;\n\n    for (let [key, value] of Object.entries(params)) {\n        search_params.append(key, value);\n    }\n\n    return result;\n}","import { BalanceActionTypes } from '../actionTypes';\nimport Api from '../../core/util/Api';\nimport axios from 'axios';\nimport checkTokenExpired from '../../core/util/checkTokenExpired';\nimport getQueryUrl from '../../core/util/getQueryUrl';\n\n\n// fetch list\nexport const fetchAllBalancesAction = () => {\n    return {\n        type: BalanceActionTypes.FETCH_ALL_BALANCE\n    }\n}\nexport const fetchAllBalancesSuccessAction = balances => {\n    return {\n        type: BalanceActionTypes.FETCH_ALL_BALANCE_SUCCESS,\n        payload: balances\n    }\n}\nexport const fetchAllBalancesErrorAction = error => {\n    return {\n        type: BalanceActionTypes.FETCH_ALL_BALANCE_ERROR,\n        payload: error\n    }\n}\nexport const fetchAllBalances = params => async dispatch => {\n    dispatch(fetchAllBalancesAction());\n    try {\n        const url = getQueryUrl(\"pgc-service/api/transaction/supplier/page\", params);\n        const res = await axios.get(decodeURIComponent(url));\n        const { data } = res;\n        dispatch(fetchAllBalancesSuccessAction(data));\n    } catch (error) {\n        // checkTokenExpired(error);\n        dispatch(fetchAllBalancesErrorAction(error));\n    }\n}\n\n// fetch Seller balance\nexport const fetchOverviewAction = () => {\n    return {\n        type: BalanceActionTypes.FETCH_OVERVIEW\n    }\n}\nexport const fetchOverviewSuccessAction = data => {\n    return {\n        type: BalanceActionTypes.FETCH_OVERVIEW_SUCCESS,\n        payload: data\n    }\n}\nexport const fetchOverviewErrorAction = error => {\n    return {\n        type: BalanceActionTypes.FETCH_OVERVIEW_ERROR,\n        payload: error\n    }\n}\nexport const fetchOverview = () => async dispatch => {\n    dispatch(fetchOverviewAction());\n    try {\n        const res = await Api.get(\"pgc-service/api/user-balance\");\n        if (res && res.status === 200) {\n            const { data } = res;\n\n            dispatch(fetchOverviewSuccessAction(data));\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(fetchOverviewErrorAction(error.response.data.message))\n    }\n}\n// CREATE DEPOSIT\nexport const createDepositAction = () => ({\n    type: BalanceActionTypes.CREATE_DEPOSIT\n})\nexport const createDepositSuccessAction = () => ({\n    type: BalanceActionTypes.CREATE_DEPOSIT_SUCCESS\n})\nexport const createDepositErrorAction = error => ({\n    type: BalanceActionTypes.CREATE_DEPOSIT_ERROR,\n    payload: error\n})\nexport const doCreateDeposit = params => async dispatch => {\n    dispatch(createDepositAction());\n    try {\n        const res = await Api.post(\"pgc-service/api/transaction/deposit\", params);\n        if(res && res.status === 200) {\n            dispatch(createDepositSuccessAction())\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(createDepositErrorAction(error.response.data.message))\n    }\n}\n// update deposit\nexport const updateDepositAction = () => ({\n    type: BalanceActionTypes.UPDATE_DEPOSIT\n})\nexport const updateDepositSuccessAction = () => ({\n    type: BalanceActionTypes.UPDATE_DEPOSIT_SUCCESS\n})\nexport const updateDepositErrorAction = error => ({\n    type: BalanceActionTypes.UPDATE_DEPOSIT_ERROR,\n    payload: error\n})\nexport const doUpdateDeposit = params => async dispatch => {\n    dispatch(updateDepositAction());\n    try {\n        const res = await Api.put(\"pgc-service/api/transaction/deposit\", params);\n        if(res && res.status === 200) {\n            dispatch(updateDepositSuccessAction())\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(updateDepositErrorAction(error.response.data.message))\n    }\n}\n// delete deposit \nexport const deleteDepositAction = () => ({\n    type: BalanceActionTypes.DELETE_DEPOSIT\n})\nexport const deleteDepositSuccessAction = () => ({\n    type: BalanceActionTypes.DELETE_DEPOSIT_SUCCESS\n})\nexport const deleteDepositErrorAction = error => ({\n    type: BalanceActionTypes.DELETE_DEPOSIT_ERROR,\n    payload: error\n})\nexport const doDeleteDeposit = id => async dispatch => {\n    dispatch(deleteDepositAction());\n    try {\n        const res = await Api.delete(\"pgc-service/api/transaction/\" + id);\n        if(res && res.status === 200) {\n            dispatch(deleteDepositSuccessAction())\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(deleteDepositErrorAction(error.response.data.message))\n    }\n}\n\n\nexport const resetError = () => ({\n    type: BalanceActionTypes.RESET_ERROR\n})","import * as _ from 'lodash';\nimport {ProductsActionTypes} from '../actionTypes';\nimport API from '../../core/util/Api';\nimport checkTokenExpired from '../../core/util/checkTokenExpired';\n\n\n// FETCH ALL PDT NO PAGING\nconst fetchAllProductTypeNoPagingAction = () => ({\n    type: ProductsActionTypes.DO_FETCH_ALL_PRODUCT_TYPE_NO_PAGING,\n});\n\nconst fetchAllProductTypeNoPagingSuccessAction = (data) => ({\n    type: ProductsActionTypes.FETCH_ALL_PRODUCT_TYPE_NO_PAGING_SUCCESS,\n    payload: data,\n});\n\nconst fetchAllProductTypeNoPagingErrorAction = (error) => ({\n    type: ProductsActionTypes.FETCH_ALL_PRODUCT_TYPE_NO_PAGING_ERROR,\n    payload: error,\n});\n\nexport const fetchAllProductTypeNoPaging = () => async (dispatch) => {\n    dispatch(fetchAllProductTypeNoPagingAction());\n    try {\n        const response = await API.get(`pgc-service/api/product-type/list`);\n        const result = _.get(response, 'data');\n        if (result) {\n            dispatch(fetchAllProductTypeNoPagingSuccessAction(result));\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(fetchAllProductTypeNoPagingErrorAction(error.response.data.message));\n    }\n};\n","import * as fileSaver from 'file-saver';\nimport { OrdersActionTypes } from '../actionTypes';\nimport Api from '../../core/util/Api';\nimport axios from 'axios';\nimport checkTokenExpired from '../../core/util/checkTokenExpired';\nimport getQueryUrl from '../../core/util/getQueryUrl';\n\n// fetch list\nexport const fetchAllOrderAction = () => {\n    return {\n        type: OrdersActionTypes.FETCH_ALL_ORDERS\n    }\n}\nexport const fetchAllOrderSuccessAction = orders => {\n    return {\n        type: OrdersActionTypes.FETCH_ALL_ORDERS_SUCCESS,\n        payload: orders\n    }\n}\nexport const fetchAllOrderErrorAction = error => {\n    return {\n        type: OrdersActionTypes.FETCH_ALL_ORDERS_ERROR,\n        payload: error\n    }\n}\nexport const fetchAllOrder = params => async dispatch => {\n    dispatch(fetchAllOrderAction());\n    try {\n        const url = getQueryUrl(\"pgc-service/api/order/supplier/page\", params);\n        const res = await axios.get(decodeURIComponent(url));\n\n        // const res = await axios.get(\"https://api.mocki.io/v1/6cbe5f6f\");\n        const { data } = res;\n        dispatch(fetchAllOrderSuccessAction(data));\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(fetchAllOrderErrorAction(error));\n    }\n}\n\n// save image\nexport const saveImageDesignAction = () => ({\n    type: OrdersActionTypes.SAVE_IMAGE_DESIGN\n})\nexport const saveImageDesignSuccessAction = () => ({\n    type: OrdersActionTypes.SAVE_IMAGE_DESIGN_SUCCESS\n})\nexport const saveImageDesignErrorAction = error => ({\n    type: OrdersActionTypes.SAVE_IMAGE_DESIGN_ERROR,\n    payload: error\n})\nexport const saveImageDesign = value => async dispatch => {\n    dispatch(saveImageDesignAction());\n    try {\n        const res = await Api.put(\"pgc-service/api/order/design\", value);\n        if (res && res.status === 200) {\n            dispatch(saveImageDesignSuccessAction())\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(saveImageDesignErrorAction(error.response.data.message))\n    }\n}\n// export order\nexport const exportOrderAction = () => ({\n    type: OrdersActionTypes.EXPORT_ORDER\n})\nexport const exportOrderSuccessAction = () => ({\n    type: OrdersActionTypes.EXPORT_ORDER_SUCCESS\n})\nexport const exportOrderErrorAction = error => ({\n    type: OrdersActionTypes.EXPORT_ORDER_ERROR,\n    payload: error\n})\nexport const exportOrder = (params, arr) => async dispatch => {\n    dispatch(exportOrderAction());\n    // const url = getQueryUrl(\"pgc-service/api/order/supplier/export\", params)\n    // axios.post(\"pgc-service/api/order/supplier/export?isAll=\" + isAll, params, { responseType: 'arraybuffer' })\n    const url = getQueryUrl(\"pgc-service/api/order/supplier/export\", params)\n    Api.post(decodeURIComponent(url), arr, { responseType: 'arraybuffer' })\n        .then((response) => {\n            var blob = new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n            let disposition = response.headers['content-disposition'];\n            let fileName = disposition ? disposition.split(\"filename=\")[1] : 'orders-export';\n            fileSaver.saveAs(blob, fileName);\n            dispatch(exportOrderSuccessAction())\n        })\n        .catch(err => {\n            checkTokenExpired(err);\n            dispatch(exportOrderErrorAction(err))\n        })\n\n}\n\n// CANCEL\nexport const cancelAction = () => ({\n    type: OrdersActionTypes.CANCEL\n})\nexport const cancelSuccessAction = data => ({\n    type: OrdersActionTypes.CANCEL_SUCCESS,\n    payload: data\n})\nexport const cancelErrorAction = error => ({\n    type: OrdersActionTypes.CANCEL_ERROR,\n    payload: error\n})\nexport const cancel = data => async dispatch => {\n    dispatch(cancelAction());\n    try {\n        const res = await Api.put(\"pgc-service/api/order/supplier/cancel\", data);\n        if (res && res.status === 200) {\n            dispatch(cancelSuccessAction(res.data))\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(cancelErrorAction(error))\n    }\n}\n// Fetch statistic\nexport const fetchStatisticAction = () => ({\n    type: OrdersActionTypes.FETCH_STATISTIC\n})\nexport const fetchStatisticSuccessAction = data => ({\n    type: OrdersActionTypes.FETCH_STATISTIC_SUCCESS,\n    payload: data\n})\nexport const fetchStatisticErrorAction = error => ({\n    type: OrdersActionTypes.FETCH_STATISTIC_ERROR,\n    payload: error\n})\nexport const fetchStatistic = () => async dispatch => {\n    dispatch(fetchStatisticAction());\n    try {\n        const res = await Api.get(\"pgc-service/api/order/supplier/statistic\");\n        if (res && res.status === 200) {\n            dispatch(fetchStatisticSuccessAction(res.data))\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(fetchStatisticErrorAction(error))\n    }\n}\n// report error \nexport const reportAction = () => ({\n    type: OrdersActionTypes.REPORT\n})\nexport const reportSuccesAction = () => ({\n    type: OrdersActionTypes.REPORT_SUCCESS\n})\nexport const reportErrorAction = err => ({\n    type: OrdersActionTypes.REPORT,\n    payload: err\n})\nexport const report = params => async dispatch => {\n    dispatch(reportAction());\n    try {\n        const res = await Api.put(\"\", params);\n        if (res && res.status === 200) {\n            dispatch(reportSuccesAction())\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(reportErrorAction(error))\n    }\n}","import * as _ from 'lodash';\nimport {ProfileActionTypes} from '../actionTypes';\nimport API from '../../core/util/Api';\nimport checkTokenExpired from '../../core/util/checkTokenExpired';\n\n// FETCH ALL NOTIFICATION SETTING\nconst fetchAllNotificationSettingAction = () => ({\n    type: ProfileActionTypes.DO_FETCH_ALL_NOTIFICATION_SETTING,\n});\n\nconst fetchAllNotificationSettingSuccessAction = (settings) => ({\n    type: ProfileActionTypes.FETCH_ALL_NOTIFICATION_SETTING_SUCCESS,\n    payload: settings,\n});\n\nconst fetchAllNotificationSettingErrorAction = (error) => ({\n    type: ProfileActionTypes.FETCH_ALL_NOTIFICATION_SETTING_ERROR,\n    payload: error,\n});\n\n// FETCH ALL CONTENT SETTING\nconst fetchAllContentSettingAction = () => ({\n    type: ProfileActionTypes.DO_FETCH_ALL_CONTENT_SETTING,\n});\n\nconst fetchAllContentSettingSuccessAction = (settings) => ({\n    type: ProfileActionTypes.FETCH_ALL_CONTENT_SETTING_SUCCESS,\n    payload: settings,\n});\n\nconst fetchAllContentSettingErrorAction = (error) => ({\n    type: ProfileActionTypes.FETCH_ALL_CONTENT_SETTING_ERROR,\n    payload: error,\n});\n\n// UPDATE NOTIFICATION\n\nexport const editNotificationSettingByIdAction = () => ({\n    type: ProfileActionTypes.DO_EDIT_NOTIFICATION_SETTING,\n});\n\nexport const editNotificationSettingByIdSuccessAction = () => ({\n    type: ProfileActionTypes.EDIT_NOTIFICATION_SETTING_SUCCESS,\n});\n\nexport const editNotificationSettingByIdErrorAction = (error) => ({\n    type: ProfileActionTypes.EDIT_NOTIFICATION_SETTING_ERROR,\n    payload: error,\n});\n\n\n// UPDATE CONTENT\n\nexport const editContentSettingByIdAction = () => ({\n    type: ProfileActionTypes.DO_EDIT_CONTENT_SETTING,\n});\n\nexport const editContentSettingByIdSuccessAction = () => ({\n    type: ProfileActionTypes.EDIT_CONTENT_SETTING_SUCCESS,\n});\n\nexport const editContentSettingByIdErrorAction = (error) => ({\n    type: ProfileActionTypes.EDIT_CONTENT_SETTING_ERROR,\n    payload: error,\n});\n\n// UPDATE USER INFO\n\nexport const editUserInfoAction = () => ({\n    type: ProfileActionTypes.DO_EDIT_USER_INFO\n});\n\nexport const editUserInfoSuccessAction = () => ({\n    type: ProfileActionTypes.EDIT_USER_INFO_SUCCESS,\n});\n\nexport const editUserInfoErrorAction = (error) => ({\n    type: ProfileActionTypes.EDIT_USER_INFO_ERROR,\n    payload: error,\n});\n\n// UPDATE PASSWORD\n\nexport const editPassAction = () => ({\n    type: ProfileActionTypes.DO_EDIT_PASS\n});\n\nexport const editPassSuccessAction = () => ({\n    type: ProfileActionTypes.EDIT_PASS_SUCCESS,\n});\n\nexport const editPassErrorAction = (error) => ({\n    type: ProfileActionTypes.EDIT_PASS_ERROR,\n    payload: error,\n});\n\n\n\nexport const fetchAllNotificationSetting = () => async (dispatch) => {\n    dispatch(fetchAllNotificationSettingAction());\n    try {\n        const response = await API.get(`pgc-service/api/config/notification`);\n        const result = _.get(response, 'data');\n\n        dispatch(fetchAllNotificationSettingSuccessAction(result));\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(fetchAllNotificationSettingErrorAction(error.response.data.message));\n    }\n};\n\nexport const fetchAllContentSetting = () => async (dispatch) => {\n    dispatch(fetchAllContentSettingAction());\n    try {\n        const response = await API.get(`pgc-service/api/config/content`);\n        const result = _.get(response, 'data');\n\n        dispatch(fetchAllContentSettingSuccessAction(result));\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(fetchAllContentSettingErrorAction(error.response.data.message));\n    }\n};\n\nexport const editNotificationSetting = (params) => async (dispatch) => {\n    dispatch(editNotificationSettingByIdAction());\n    try {\n        const response = await API.put('pgc-service/api/config/notification', params);\n        const result = _.get(response, 'data');\n        if (result) {\n            dispatch(editNotificationSettingByIdSuccessAction());\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(editNotificationSettingByIdErrorAction(error.response.data.message));\n    }\n};\n\nexport const editContentSetting = (params) => async (dispatch) => {\n    dispatch(editContentSettingByIdAction());\n    try {\n        const response = await API.put('pgc-service/api/config/content', params);\n        const result = _.get(response, 'data');\n        if (result) {\n            dispatch(editContentSettingByIdSuccessAction());\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(editContentSettingByIdErrorAction(error.response.data.message));\n    }\n};\n\nexport const editUserInfo = (params) => async (dispatch) => {\n    dispatch(editUserInfoAction());\n    try {\n        const response = await API.put('pgc-service/api/config/content', params);\n        const result = _.get(response, 'data');\n        if (result) {\n            dispatch(editUserInfoSuccessAction());\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(editUserInfoErrorAction(error.response.data.message));\n    }\n};\n\nexport const editPassword = (params) => async (dispatch) => {\n    dispatch(editPassAction());\n    try {\n        const response = await API.post('api/account/change-password', params);\n        const status = _.get(response, 'status');\n        if (status === 200) {\n            dispatch(editPassSuccessAction());\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(editPassErrorAction(error.response.data.message));\n    }\n};\n\n\n","import { ExportHistoryActionTypes } from '../actionTypes';\nimport Api from '../../core/util/Api';\nimport axios from 'axios';\nimport checkTokenExpired from '../../core/util/checkTokenExpired';\nimport getQueryUrl from '../../core/util/getQueryUrl';\nimport * as _ from 'lodash';\n\n// fetch list\nexport const fetchExportHistoryAction = () => {\n    return {\n        type: ExportHistoryActionTypes.FETCH_EXPORT_HISTORY\n    }\n}\nexport const fetchExportHistorySuccessAction = history => {\n    return {\n        type: ExportHistoryActionTypes.FETCH_EXPORT_HISTORY_SUCCESS,\n        payload: history\n    }\n}\nexport const fetchExportHistoryErrorAction = error => {\n    return {\n        type: ExportHistoryActionTypes.FETCH_EXPORT_HISTORY_ERROR,\n        payload: error\n    }\n}\nexport const fetchExportHistory = params => async dispatch => {\n    dispatch(fetchExportHistoryAction());\n    try {\n        const url = getQueryUrl(\"pgc-service/api/export-order-history/page\", params);\n        const res = await axios.get(decodeURIComponent(url));\n        if(res && res.status === 200) {\n            dispatch(fetchExportHistorySuccessAction(res.data))\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(fetchExportHistoryErrorAction(error));\n    }\n}\n\n","import * as _ from 'lodash';\nimport {DashboardActionTypes} from '../actionTypes';\nimport API from '../../core/util/Api';\nimport checkTokenExpired from '../../core/util/checkTokenExpired';\n\n\n// FETCH URGENT NOTE\nconst fetchUrgentNoteAction = () => ({\n    type: DashboardActionTypes.DO_FETCH_URGENT_NOTE,\n});\n\nconst fetchUrgentNoteSuccessAction = (data) => ({\n    type: DashboardActionTypes.FETCH_URGENT_NOTE_SUCCESS,\n    payload: data,\n});\n\nconst fetchUrgentNoteErrorAction = (error) => ({\n    type: DashboardActionTypes.FETCH_URGENT_NOTE_ERROR,\n    payload: error,\n});\n\n\n\nexport const fetchUrgentNote = () => async (dispatch) => {\n    dispatch(fetchUrgentNoteAction());\n    try {\n        const response = await API.get('pgc-service/api/news/urgent-note');\n        const result = _.get(response, 'data');\n        if (result) {\n            dispatch(fetchUrgentNoteSuccessAction(result));\n        }\n    } catch (error) {\n        checkTokenExpired(error);\n        dispatch(fetchUrgentNoteErrorAction(error.response.data.message));\n    }\n};\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"activate_wrap__1Nv2e\"};","import React, {Component} from 'react';\nimport {Button, Result, Alert} from \"antd\";\nimport CatchError from \"../../../core/util/CatchError\";\nimport cls from './activate.module.scss';\n\nclass Activate extends Component {\n\n\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        const {\n            auth,\n        } = this.props;\n\n        if (nextProps.auth.activateSuccess === true && nextProps.auth.activateSuccess !== auth.activateSuccess) {\n            window.location.href = '/login';\n        }\n    }\n\n    componentDidMount() {\n        const {search} = this.props.location;\n        const params = new URLSearchParams(search);\n        const key = params.get('key');\n\n        if (key) {\n            this.props.activate(key);\n        }\n    }\n\n\n    // submit = () => {\n    //\n    // };\n\n    render() {\n\n        const {auth} = this.props;\n\n        return (\n            <div className={cls.wrap}>\n                <Result\n                    status=\"info\"\n                    // title=\"Activate Account\"\n                    subTitle={`Active your account`}\n                    extra={[\n                        <Button type=\"link\"\n                                loading={this.props.auth.activateLoading}\n                                disabled\n                        />\n                    ]}\n                    style={{paddingTop: '100px', paddingBottom:'0'}}\n                />\n                {\n                    auth.activateError && (\n                        <Alert message={CatchError[auth.activateError] || auth.activateError} type=\"error\" showIcon\n                               style={{textAlign: 'left'}} />\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nActivate.propTypes = {};\n\nexport default Activate;\n","import {connect} from 'react-redux';\nimport {AuthActions} from '../../redux/actions';\nimport Activate from '../../views/Login/Activate/Activate';\n\nconst mapStateToProps = (state) => ({\n    auth: state.toJS().auth,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    activate: (key) => dispatch(AuthActions.activate(key)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Activate);\n"],"sourceRoot":""}