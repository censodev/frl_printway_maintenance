{"version":3,"sources":["core/util/capitalize.js","views/Dashboard/dashboard.module.less","views/Dashboard/DoughnutChart.js","views/Dashboard/Status.js","views/Dashboard/Dashboard.js","containers/Dashboard/DashboardContainer.js"],"names":["capitalize","text","split","map","item","index","toUpperCase","toLowerCase","join","module","exports","doughnutOptions","legend","display","position","align","labels","boxWidth","usePointStyle","fontFamily","cutoutPercentage","tooltips","callbacks","label","tooltipItem","data","dataset","datasets","datasetIndex","total","_meta","Object","keys","currentValue","parseFloat","toFixed","title","DoughnutChart","this","props","topProductType","topProduct","totalProductType","productTypes","value","reduce","prev","curr","totalProduct","products","dataTopProduct","toLocaleString","backgroundColor","hoverBackgroundColor","dataTopProductType","gutter","md","headStyle","bodyStyle","extra","InfoCircleOutlined","loading","height","options","Component","Status","listStatus","status","statistic","filterStatus","filter","key","totalValue","dataStatus","ref","input","chart","Option","RangePicker","lineOptions","yLabel","scales","yAxes","ticks","beginAtZero","userCallback","xAxes","Item","content","footer","tooltip","hasCurrency","className","bordered","border","padding","style","borderRadius","borderRight","classnames","cls","margin","fontSize","cursor","Dashboard","state","sellerId","siteId","startDate","endDate","onChangeDate","dates","dateStrings","setState","onSubmit","undefined","onChangeSite","onChangeSeller","fetchTopProduct","checkParam","fetchTopProductType","fetchStatistic","dataParams","site","seller","format","listSeller","fetchAllSeller","listSitesNoPaging","fetchAllSitesNoPaging","fetchStatus","fetchUrgentNote","sellers","length","sites","listStatistic","urgentNote","statistics","labelLineChart","_","sort","a","b","Date","date","toLocaleDateString","profitValue","profit","dataLineChart","fill","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","revenue","sellerOptions","id","email","fullName","siteOptions","checkSiteStatus","Array","isArray","note","message","description","ReactHtmlParser","type","showIcon","closable","Group","xs","ranges","Today","moment","Yesterday","add","subtract","startOf","endOf","showTime","isMobile","onChange","width","showSearch","allowClear","placeholder","optionFilterProp","filterOption","option","children","indexOf","WalletOutlined","marginRight","paddingBottom","box","ShoppingCartOutlined","UserOutlined","DollarOutlined","Math","abs","connect","toJS","dashboard","dispatch","params","DashboardActions","ProductsActions","SiteActions"],"mappings":"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","file":"static/js/29.1c6d3060.chunk.js","sourcesContent":["const capitalize = text => {\n    const arr = (text || \"\").split(\"\").map((item, index) => {\n        if (index === 0) return item.toUpperCase();\n        if (item === \"_\") return \" \";\n        else return item.toLowerCase();\n    })\n    return arr.join(\"\")\n}\nexport default capitalize;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"text--kTMKm\",\"icon\":\"icon--U9cR4\",\"grid\":\"grid--39Ddp\",\"item\":\"item--1Tnjz\",\"amount\":\"amount--38whh\",\"box\":\"box--3teFi\"};","import React, {Component} from 'react';\nimport {Card, Col, Row, Tooltip} from \"antd\";\nimport {InfoCircleOutlined} from \"@ant-design/icons\";\nimport {Doughnut} from \"react-chartjs-2\";\n\nconst doughnutOptions = {\n    // title: {\n    //     display: false,\n    //     // text: 'Total Orders',\n    //     // fontSize: 23,\n    //     // fontFamily: 'Source Sans Pro, Helvetica Neue, Arial, sans-serif',\n    // },\n    legend: {\n        display: true,\n        position: 'bottom',\n        align:'start',\n        labels: {\n            boxWidth: 9,\n            usePointStyle: true,\n            fontFamily: 'Poppins-Medium',\n        }\n    },\n    cutoutPercentage: 70,\n    tooltips: {\n        callbacks: {\n            label: function (tooltipItem, data) {\n                let dataset = data.datasets[tooltipItem.datasetIndex];\n                let meta = dataset._meta[Object.keys(dataset._meta)[0]];\n                let total = meta.total;\n                let currentValue = dataset.data[tooltipItem.index];\n                let percentage = parseFloat((currentValue / total * 100).toFixed(1));\n                return currentValue + ' (' + percentage + '%)';\n            },\n            title: function (tooltipItem, data) {\n                return data.labels[tooltipItem[0].index];\n            }\n        }\n    }\n};\n\nclass DoughnutChart extends Component {\n    render() {\n\n        const {topProductType, topProduct} = this.props;\n\n        const totalProductType = topProductType && topProductType.productTypes && topProductType.productTypes.map(item => item.value).reduce((prev, curr) => prev + curr, 0);\n        const totalProduct = topProduct && topProduct.products && topProduct.products.map(item => item.value).reduce((prev, curr) => prev + curr, 0);\n\n        const dataTopProduct = {\n            labels: topProduct && topProduct.products && topProduct.products.map(data => `${data.title} | ${parseFloat(data.value / (totalProduct === 0 ? 1 : totalProduct) * 100).toFixed(1)}%`),\n            datasets: [{\n                data: topProduct && topProduct.products && topProduct.products.map(data => data.value.toLocaleString()),\n                backgroundColor: [\n                    '#1890ff',\n                    '#13c2c2',\n                    '#2fc25b',\n                    '#facc14',\n                    '#f04864',\n                    '#8543e0',\n                    '#984200',\n                    '#00ffee',\n                    '#1fa9d8',\n                    '#ffc107',\n                ],\n                hoverBackgroundColor: [\n                    '#1890ff',\n                    '#13c2c2',\n                    '#2fc25b',\n                    '#facc14',\n                    '#f04864',\n                    '#8543e0',\n                    '#984200',\n                    '#00ffee',\n                    '#1fa9d8',\n                    '#ffc107',\n                ]\n            }]\n        };\n        const dataTopProductType = {\n            labels: topProductType && topProductType.productTypes && topProductType.productTypes.map(data => `${data.title} | ${parseFloat(data.value / (totalProductType === 0 ? 1 : totalProductType) * 100).toFixed(1)}%`),\n            datasets: [{\n                data: topProductType && topProductType.productTypes && topProductType.productTypes.map(data => data.value.toLocaleString()),\n                backgroundColor: [\n                    '#1890ff',\n                    '#8543e0',\n                    '#facc14',\n                    '#2fc25b',\n                    '#1fa9d8',\n                    '#ffc107',\n                    '#13c2c2',\n                    '#f04864',\n                    '#00ffee',\n                    '#984200',\n                ],\n                hoverBackgroundColor: [\n                    '#1890ff',\n                    '#8543e0',\n                    '#facc14',\n                    '#2fc25b',\n                    '#1fa9d8',\n                    '#ffc107',\n                    '#13c2c2',\n                    '#f04864',\n                    '#00ffee',\n                    '#984200',\n                ]\n            }]\n        };\n\n\n        return (\n            <Row gutter={24}>\n                <Col md={12}>\n                    <Card\n                        title={'Top 10 Best Selling Products'}\n                        headStyle={{fontFamily:'Poppins-Medium'}}\n                        bodyStyle={{\n                            // paddingBottom: '12px',\n                        }}\n                        extra={<Tooltip\n                            title={'Top 10 Best Selling Products'}\n                        >\n                            <InfoCircleOutlined/>\n                        </Tooltip>}\n                        loading={topProduct.loading}\n                    >\n                        {topProduct && topProduct.products ?\n                            <Doughnut data={dataTopProduct} height={150} options={doughnutOptions}/> : 'No Data'}\n                    </Card>\n                </Col>\n                <Col md={12}>\n                    <Card\n                        title={'Top 10 Products Type'}\n                        headStyle={{fontFamily:'Poppins-Medium'}}\n                        bodyStyle={{\n                            // paddingBottom: '12px',\n                        }}\n                        extra={<Tooltip\n                            title={'Top 10 Products Type'}\n                        >\n                            <InfoCircleOutlined/>\n                        </Tooltip>}\n                        loading={topProductType.loading}\n                    >\n                        {topProductType && topProductType.productTypes ?\n                            <Doughnut data={dataTopProductType} height={150} options={doughnutOptions}/> : 'No Data'}\n                    </Card>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nDoughnutChart.propTypes = {};\n\nexport default DoughnutChart;\n","import React, {Component} from 'react';\nimport {Card, Col, Row, Tooltip} from \"antd\";\nimport {InfoCircleOutlined} from \"@ant-design/icons\";\nimport {Doughnut} from \"react-chartjs-2\";\nimport capitalize from \"../../core/util/capitalize\";\n\nconst doughnutOptions = {\n    // title: {\n    //     display: false,\n    //     // text: 'Total Orders',\n    //     // fontSize: 23,\n    //     // fontFamily: 'Source Sans Pro, Helvetica Neue, Arial, sans-serif',\n    // },\n    legend: {\n        display: true,\n        position: 'right',\n        labels: {\n            boxWidth: 9,\n            usePointStyle: true,\n            fontFamily: 'Poppins-Medium'\n        }\n    },\n    cutoutPercentage: 70,\n    tooltips: {\n        callbacks: {\n            label: function (tooltipItem, data) {\n                let dataset = data.datasets[tooltipItem.datasetIndex];\n                let meta = dataset._meta[Object.keys(dataset._meta)[0]];\n                let total = meta.total;\n                let currentValue = dataset.data[tooltipItem.index];\n                let percentage = parseFloat((currentValue / total * 100).toFixed(1));\n                return currentValue + ' (' + percentage + '%)';\n            },\n            title: function (tooltipItem, data) {\n                return data.labels[tooltipItem[0].index];\n            }\n        }\n    }\n};\n\n\nclass Status extends Component {\n\n\n    render() {\n\n        const {listStatus} = this.props;\n        const {status, loading} = listStatus;\n        const {statistic} = status;\n\n        const filterStatus = statistic ? Object.keys(statistic).filter(key => {\n            return key === 'PENDING_DESIGN' || key === 'PROCESSING' || key === 'REFUNDED' || key === 'SHIPPED' || key === 'ON_HOLD' || key === 'NEED_PAY' || key === 'IN_PRODUCTION' || key === 'CANCELED' || key === 'ACTION_REQUIRED'\n        }) : [];\n\n\n        const totalValue = filterStatus.map(item => statistic[item]).reduce((prev, curr) => prev + curr, 0);\n\n\n        const dataStatus = {\n            labels: filterStatus.map(key => `${capitalize(key)}:   ${statistic[key].toLocaleString()} | ${parseFloat(statistic[key] / (totalValue === 0 ? 1 : totalValue) * 100).toFixed(1)}%`),\n            datasets: [{\n                data: filterStatus.map(key => statistic[key]),\n                backgroundColor: [\n                    '#1890ff',\n                    '#13c2c2',\n                    '#2fc25b',\n                    '#facc14',\n                    '#f04864',\n                    '#8543e0',\n                    '#984200',\n                    '#00ffee',\n                    '#1fa9d8',\n                    '#ffc107',\n                ],\n                hoverBackgroundColor: [\n                    '#1890ff',\n                    '#13c2c2',\n                    '#2fc25b',\n                    '#facc14',\n                    '#f04864',\n                    '#8543e0',\n                    '#984200',\n                    '#00ffee',\n                    '#1fa9d8',\n                    '#ffc107',\n                ]\n            }]\n        };\n\n        return (\n            <Row gutter={24}>\n                <Col md={12}>\n                    <Card\n                        title={'Order Status allocation'}\n                        headStyle={{fontFamily:'Poppins-Medium'}}\n                        bodyStyle={{\n                            // paddingBottom: '12px',\n                        }}\n                        extra={<Tooltip\n                            title={'Order Status allocation'}\n                        >\n                            <InfoCircleOutlined/>\n                        </Tooltip>}\n                        loading={loading}\n                    >\n                        {statistic ?\n                            <Doughnut ref={input => this.chart = input} data={dataStatus} height={150}\n                                      options={doughnutOptions}/> : 'No Data'}\n                    </Card>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nStatus.propTypes = {};\n\nexport default Status;\n","import React, {Component} from 'react'\nimport {\n    Card,\n    Input,\n    Row,\n    Col,\n    Select,\n    DatePicker,\n    Tooltip,\n    Alert,\n    Divider,\n} from 'antd';\nimport {\n    WalletOutlined,\n    DollarOutlined,\n    InfoCircleOutlined,\n    ShoppingCartOutlined,\n    UserOutlined,\n} from '@ant-design/icons';\nimport {isMobile} from 'react-device-detect';\nimport * as _ from 'lodash';\nimport classnames from 'classnames';\nimport moment from 'moment';\nimport {Line} from 'react-chartjs-2';\nimport cls from \"./dashboard.module.less\";\nimport DoughnutChart from \"./DoughnutChart\";\nimport Status from \"./Status\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport checkSiteStatus from \"../../core/util/checkSiteStatus\";\n\nconst {Option} = Select;\nconst {RangePicker} = DatePicker;\nconst lineOptions = {\n    title: {\n        display: false,\n        // text: 'Total Orders',\n        // fontSize: 23,\n        // fontFamily: 'Source Sans Pro, Helvetica Neue, Arial, sans-serif',\n    },\n    legend: {\n        display: true,\n        position: 'bottom',\n        labels: {\n            boxWidth: 7,\n            usePointStyle: true\n        }\n    },\n    tooltips: {\n        callbacks: {\n            label(tooltipItem, data) {\n                return `${data.datasets[tooltipItem.datasetIndex].label}: ${parseFloat(tooltipItem.yLabel).toLocaleString('en-GB')} `;\n            },\n        },\n    },\n    scales: {\n        yAxes: [{\n            ticks: {\n                beginAtZero: true,\n                userCallback(value) {\n                    return parseFloat(value).toLocaleString('en-GB');\n                },\n            },\n        }],\n        xAxes: [{\n            ticks: {},\n        }],\n    },\n};\n\nconst Item = ({title, content, footer, tooltip, hasCurrency, className}) => {\n    return (\n        <Card title={title}\n              extra={tooltip ? <Tooltip\n                  title={tooltip}\n              >\n                  <InfoCircleOutlined/>\n              </Tooltip> : false}\n              bordered={false}\n              loading={false}\n              headStyle={{\n                  border: 'none',\n                  padding: '0 10px',\n              }}\n              bodyStyle={{\n                  padding: '0 10px',\n              }}\n              style={{\n                  borderRadius: '0',\n                  borderRight: '1px solid #f0f0f0',\n              }}\n        >\n            <span className={classnames(cls.text, className)}>\n                {content}\n            </span>\n            <Divider style={{margin: '15px 0'}}/>\n            <span style={{fontSize: '14px'}}>\n                New today: <a style={{cursor: 'default'}}>{hasCurrency && '$'}{parseFloat(footer).toLocaleString('en-GB')}</a>\n            </span>\n        </Card>\n    )\n};\n\nexport default class Dashboard extends Component {\n    state = {\n        sellerId: null,\n        siteId: null,\n        startDate: null,\n        endDate: null,\n    };\n\n    componentDidMount() {\n        const {listSeller, fetchAllSeller, listSitesNoPaging, fetchAllSitesNoPaging, fetchStatus, fetchTopProduct, fetchTopProductType, fetchStatistic, fetchUrgentNote} = this.props;\n        fetchStatus();\n        fetchTopProduct(this.checkParam());\n        fetchTopProductType(this.checkParam());\n        fetchStatistic(this.checkParam());\n        fetchUrgentNote();\n        if (listSeller.sellers.length === 0) {\n            fetchAllSeller();\n        }\n\n        if (listSitesNoPaging.sites.length === 0) {\n            fetchAllSitesNoPaging();\n        }\n    }\n\n\n    onChangeDate = (dates, dateStrings) => {\n        if (dates) {\n            this.setState({\n                startDate: dates[0],\n                endDate: dates[1],\n            }, () => {\n                this.onSubmit();\n            });\n        } else {\n            this.setState({\n                startDate: undefined,\n                endDate: undefined\n            }, () => {\n                this.onSubmit();\n            })\n        }\n    };\n\n    onChangeSite = (value) => {\n        this.setState({\n            siteId: value\n        }, () => {\n            this.onSubmit();\n        })\n    };\n\n    onChangeSeller = (value) => {\n        this.setState({\n            sellerId: value\n        }, () => {\n            this.onSubmit();\n        })\n    };\n\n    onSubmit = () => {\n        this.props.fetchTopProduct(this.checkParam());\n        this.props.fetchTopProductType(this.checkParam());\n        this.props.fetchStatistic(this.checkParam());\n    };\n\n    checkParam = () => {\n        const {\n            siteId,\n            sellerId,\n            startDate,\n            endDate,\n        } = this.state;\n\n        const dataParams = {};\n\n        if (siteId) {\n            dataParams.site = siteId;\n        }\n        if (sellerId) {\n            dataParams.seller = sellerId;\n        }\n        if (startDate && endDate) {\n            dataParams.startDate = `${startDate.format('YYYY-MM-DDT00:00:00.000')}Z`;\n            dataParams.endDate = `${endDate.format('YYYY-MM-DDT23:59:59.000')}Z`;\n        }\n        return dataParams;\n    };\n\n\n    render() {\n        const {listStatistic, listSeller, listSitesNoPaging, listStatus, topProduct, topProductType, urgentNote} = this.props;\n        const {statistics} = listStatistic;\n        let labelLineChart = _.get(statistics, 'revenueProfitChart', []).sort(function(a, b) { return new Date(a.date) - new Date(b.date) }).map(data => new Date(data.date).toLocaleDateString('en-GB'));\n        let profitValue = _.get(statistics, 'revenueProfitChart', []).sort(function(a, b) { return new Date(a.date) - new Date(b.date) }).map(data => data.profit);\n        let revenueValue = _.get(statistics, 'revenueProfitChart', []).sort(function(a, b) { return new Date(a.date) - new Date(b.date) }).map(data => data.revenue);\n        let dataLineChart = {\n            labels: labelLineChart,\n            datasets: [\n                {\n                    label: 'Revenue',\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: '#1890ff',\n                    borderColor: '#1890ff',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: '#fff',\n                    pointBackgroundColor: '#1890ff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: revenueValue,\n                },\n                {\n                    label: 'Profit',\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: '#2fc25b',\n                    borderColor: '#2fc25b',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: '#fff',\n                    pointBackgroundColor: '#2fc25b',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: profitValue,\n                },\n            ]\n        };\n\n        let sellerOptions = listSeller.sellers.map(data => (\n            <Option key={data.id} value={data.email}>\n                {data.fullName || ''}\n            </Option>\n        ));\n\n        let siteOptions = listSitesNoPaging.sites.filter((site)=>{\n            return this.state.sellerId ? site.email === this.state.sellerId : site;\n        }).map(value => (\n            <Option key={value.id} value={value.id}>\n                {`${value.title} ${checkSiteStatus(value)}`}\n            </Option>\n        ));\n\n        return (\n            <>\n                {\n                    Array.isArray(urgentNote.note) && urgentNote.note.length > 0 && (\n                        <>\n                            <Alert\n                                message={urgentNote.note[urgentNote.note.length - 1].title || ''}\n                                description={ReactHtmlParser(urgentNote.note[urgentNote.note.length - 1].content || '')}\n                                type=\"info\"\n                                showIcon\n                                closable\n                            />\n                            <br/>\n                        </>\n                    )\n                }\n                <Input.Group>\n                    <Row gutter={24}>\n                        <Col md={6} xs={24}>\n                            <RangePicker\n                                ranges={{\n                                    Today: [moment(), moment()],\n                                    Yesterday: [moment().add(-1, 'days'), moment().add(-1, 'days')],\n                                    'Last 7 days': [moment().subtract(6, 'days'), moment()],\n                                    'Last 30 days': [moment().subtract(29, 'days'), moment()],\n                                    'This Month': [moment().startOf('month'), moment().endOf('month')],\n                                    'Last Month': [moment().subtract(1, 'months').startOf('month'),\n                                        moment().subtract(1, 'months').endOf('month')],\n                                    // 'Last 3 Month': [moment().subtract(3, 'months').startOf('month'),\n                                    //     moment().subtract(1, 'months').endOf('month')],\n                                }}\n                                // renderExtraFooter={() => <div>MyFooter</div>}\n                                // showToday\n                                showTime={!!isMobile}\n                                format=\"DD/MM/YYYY\"\n                                // defaultValue={[moment().subtract(6, 'days'), moment()]}\n                                onChange={this.onChangeDate}\n                                style={{width: '100%'}}\n                            />\n                        </Col>\n                        <Col md={5} xs={24}>\n                            <Select\n                                showSearch\n                                allowClear\n                                style={{width: '100%'}}\n                                placeholder=\"All sellers\"\n                                onChange={this.onChangeSeller}\n                                optionFilterProp=\"children\"\n                                filterOption={(input, option) =>\n                                    option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    || option.props.value.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                }\n                            >\n                                {\n                                    sellerOptions\n                                }\n                            </Select>\n                        </Col>\n                        <Col md={5} xs={24}>\n                            <Select\n                                showSearch\n                                allowClear\n                                style={{width: '100%'}}\n                                placeholder=\"All sites\"\n                                onChange={this.onChangeSite}\n                                optionFilterProp=\"children\"\n                                filterOption={(input, option) =>\n                                    option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    || option.props.value.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                }\n                            >\n                                {\n                                    siteOptions\n                                }\n                            </Select>\n                        </Col>\n                    </Row>\n                </Input.Group>\n                <br/>\n                <Card\n                    title={<span><WalletOutlined style={{marginRight: '5px'}}/> BALANCE OVERVIEW</span>}\n                    headStyle={{fontFamily: 'Poppins-Medium'}}\n                    bodyStyle={{\n                        paddingBottom: '12px'\n                    }}\n                    loading={listStatistic.loading}\n                >\n                    <div className={cls.box}>\n                        <div>\n                            <Item\n                                className={classnames('blue', cls.text)}\n                                title={<span><ShoppingCartOutlined/> Order</span>}\n                                content={`${parseFloat(_.get(statistics, 'totalOrder', 0)).toLocaleString('en-GB')}`}\n                                tooltip='Total Order'\n                                footer={_.get(statistics, 'todayTotalOrders', 0)}\n                            />\n                        </div>\n                        <div>\n                            <Item\n                                className={classnames('blue', cls.text)}\n                                title={<span><UserOutlined/> Seller</span>}\n                                content={`${parseFloat(_.get(statistics, 'totalSeller', 0)).toLocaleString('en-GB')}`}\n                                tooltip='Total Seller'\n                                footer={_.get(statistics, 'todayTotalSeller', 0)}\n                            />\n                        </div>\n                        <div>\n                            <Item\n                                className={classnames('blue', cls.text)}\n                                title={<span><DollarOutlined/> Supplier cost</span>}\n                                content={`$${Math.abs(_.get(statistics, 'totalRevenue', 0) - _.get(statistics, 'totalProfit', 0)).toLocaleString('en-GB')}`}\n                                hasCurrency\n                                tooltip='Supplier Cost = SUM OF [Supplier cost*Line item Quantity]'\n                                footer={Math.abs(_.get(statistics, 'todayTotalRevenue', 0) - _.get(statistics, 'todayTotalProfit', 0))}\n                            />\n                        </div>\n                        <div>\n                            <Item\n                                className={classnames('orange', cls.text)}\n                                title={<span><DollarOutlined/> Revenue</span>}\n                                content={`$${parseFloat(_.get(statistics, 'totalRevenue', 0)).toLocaleString('en-GB')}`}\n                                hasCurrency\n                                tooltip='Revenue =SUM OF [(Base cost - Discount + Extra Shipping Fee) * Line Item Quantity]'\n                                footer={_.get(statistics, 'todayTotalRevenue', 0)}\n                            />\n                        </div>\n                        <div>\n                            <Item\n                                className={classnames('green', cls.text)}\n                                title={<span><DollarOutlined/> Profit</span>}\n                                content={`$${parseFloat(_.get(statistics, 'totalProfit', 0)).toLocaleString('en-GB')}`}\n                                hasCurrency\n                                tooltip='Profit = Revenue - Supplier cost'\n                                footer={_.get(statistics, 'todayTotalProfit', 0)}\n                            />\n                        </div>\n                        <div>\n                            <Item\n                                className={classnames('blue', cls.text)}\n                                title={<span><DollarOutlined/> Total CusTom Transaction</span>}\n                                content={`$${parseFloat(_.get(statistics, 'totalCustomBalance', 0)).toLocaleString('en-GB')}`}\n                                hasCurrency\n                                tooltip='SUM OF [Custom transaction]'\n                                footer={_.get(statistics, 'todayCustomBalance', 0)}\n                            />\n                        </div>\n                    </div>\n                </Card>\n                <br/>\n                <Card\n                    title={'Revenue/Profit'}\n                    headStyle={{fontFamily: 'Poppins-Medium'}}\n                    bodyStyle={{\n                        //paddingBottom: '12px',\n                    }}\n                    extra={<Tooltip\n                        title={'Revenue/Profit'}\n                    >\n                        <InfoCircleOutlined/>\n                    </Tooltip>}\n                    // loading={userBalance.loading}\n                >\n                    <Line data={dataLineChart} height={90} options={lineOptions}/>\n                </Card>\n                <br/>\n                <DoughnutChart topProduct={topProduct} topProductType={topProductType}/>\n                <br/>\n                <Status listStatus={listStatus}/>\n            </>\n        )\n    }\n}\n","import {connect} from 'react-redux';\n\nimport {DashboardActions, ProductsActions, SiteActions} from '../../redux/actions';\nimport Dashboard from \"../../views/Dashboard/Dashboard\";\n\nconst mapStateToProps = (state) => ({\n    listStatistic: state.toJS().dashboard.listStatistic,\n    listSeller: state.toJS().products.listSeller,\n    listStatus: state.toJS().dashboard.listStatus,\n    topProduct: state.toJS().dashboard.topProduct,\n    topProductType: state.toJS().dashboard.topProductType,\n    listSitesNoPaging: state.toJS().sites.listSitesNoPaging,\n    urgentNote: state.toJS().dashboard.urgentNote,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    fetchStatistic: (params) => dispatch(DashboardActions.fetchStatistic(params)),\n    fetchStatus: () => dispatch(DashboardActions.fetchStatus()),\n    fetchTopProduct: (params) => dispatch(DashboardActions.fetchTopProduct(params)),\n    fetchTopProductType: (params) => dispatch(DashboardActions.fetchTopProductType(params)),\n    fetchAllSeller: () => dispatch(ProductsActions.fetchAllSeller()),\n    fetchAllSitesNoPaging: () => dispatch(SiteActions.fetchAllSitesNoPaging()),\n    fetchUrgentNote: () => dispatch(DashboardActions.fetchUrgentNote()),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Dashboard);\n"],"sourceRoot":""}